(* Lockstitch's KDF expansion, encryption, and tag derivation is INT-CTXT. *)
(* XXX DOES NOT WORK YET XXX *)
(* TODO figure out how to tell CryptoVerif it can compare the KDF output of the tag to verify the tag *)

(* Common key type for encryption and MAC *)

type key [fixed, large].

(* (CPA Stream cipher, assumed to use a nonce) *)

proba Penc.

expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* Mac *)

type tag [fixed].

proba Pmac.

expand SUF_CMA_det_mac(key, bitstring, tag, mac, verify, Pmac).

(* Hash *)

type hash_key [fixed, large].
type input [fixed, large].
type digest [fixed, large].

expand ROM_hash(hash_key, input, digest, kdf_extract, Okdf_extract, qKDFextract).

(* PRF *)

type ctr [fixed].
const ctr1, ctr2, ctr3: ctr.

proba Pkdf.

expand PRF(digest, ctr, key, kdf_expand, Pkdf).

(* Construction *)

fun concat(bitstring, key): bitstring [data].
fun ratchet(key, tag): input [data].

(* equation forall k: key, k2: key, hk: hash_key;
    veirfy(k, kfd_expand(kdf_extract())) = true. *)

letfun full_enc(m: bitstring, hk: hash_key, ikm: input) =
    prk1 <- kdf_extract(hk, ikm);
    k1 <- kdf_expand(prk1, ctr1);
    k2 <- kdf_expand(prk1, ctr2);
    k3 <- kdf_expand(prk1, ctr3);
    c1 <- enc(m, k2);
    t1 <- mac(c1, k3);
    prk2 <- kdf_extract(hk, ratchet(k1, t1));
    k5 <- kdf_expand(prk2, ctr2);
    concat(c1, k5).

letfun full_dec(c: bitstring, hk: hash_key, ikm: input) =
    let concat(c1, k5) = c in
    (
        prk1 <- kdf_extract(hk, ikm);
        k1 <- kdf_expand(prk1, ctr1);
        k2 <- kdf_expand(prk1, ctr2);
        k3 <- kdf_expand(prk1, ctr3);
        t1 <- mac(c1, k3);
        prk2 <- kdf_extract(hk, ratchet(k1, t1));
        k5' <- kdf_expand(prk2, ctr2);
        if k5 = k5' then
            dec(c1, k1)
        else
            bottom
    )
    else
        bottom.

(* Queries *)

param qEnc, qDec.

event bad.
query event(bad) ==> false.

table ciphertexts(bitstring).
 
let Qenc(hk: hash_key, ikm: input) = 
    foreach ienc <= qEnc do
        OEnc(m0: bitstring) :=
            c0 <- full_enc(m0, hk, ikm);
            insert ciphertexts(c0);
            return(c0).

let QdecTest(hk: hash_key, ikm: input) =
    foreach idec <= qDec do
        ODec(c: bitstring) :=
            get ciphertexts(=c) in return(true) else
                if full_dec(c, hk, ikm) <> bottom
                then event bad; return(true)
                else return(false).

process 
    Ostart() :=
    hk <-R hash_key;
    ikm <-R input;
    return;
    (run Qenc(hk, ikm) | run QdecTest(hk, ikm) | run Okdf_extract(hk))