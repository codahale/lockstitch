(* Lockstitch's KDF expansion and derivation is indistinguishable from a random oracle. *)

(* Using SHA-256 to hash the transcript is assumed to be a random oracle. *)

type hash_key [fixed].
type transcript [bounded, large, nonuniform].
type prk [fixed, large].
type ctr [fixed].
const ctr1: ctr.

expand ROM_hash(hash_key, transcript, prk, kdf_extract, Okdf_extract, qKDFextract).
expand ROM_hash(prk, ctr, prk, kdf_expand, Okdf_expand, qKDFexpand).

(* Construction *)

letfun md(hk: hash_key, t: transcript) =
    prk1 <- kdf_extract(hk, t);
    k1 <- kdf_expand(prk1, ctr1);
    k1.

(* Queries *)

expand ROM_hash(hash_key, transcript, prk, rom, Ohash, qHash).

param qMD.

query secret b [cv_bit].

let QmdLR(b0: bool, hk: hash_key) = 
    foreach i <= qMD do
        Omd (t: transcript) :=
        d <- if b0 then md(hk, t) else kdf_extract(hk, t);
        return(d).

process 
    Ostart() :=
    b <-R bool;
    hk <-R hash_key;
    return;
    (run QmdLR(b, hk)) (* we don't give the adversary access to oracles *)