(* Lockstitch's KDF expansion and unauthenticated encryption is IND-CPA. *)

(* AEGIS-128L is assumed to be IND-CPA when used with a unique nonce. *)

proba Penc.

type key [fixed].

expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* Using SHA-256 to hash the transcript is assumed to be a random oracle. *)

type hash_key [fixed].
type transcript [bounded, large].
type prk [fixed, large].

expand ROM_hash(hash_key, transcript, prk, kdf_extract, Okdf_extract, qKDFextract).

(* Using SHA-256 to hash a counter is assumed to be a PRF. *)

type ctr [fixed].
const ctr1: ctr.

proba Pkdf.

expand PRF(prk, ctr, key, kdf_expand, Pkdf).

(* Construction *)

letfun full_enc(m: bitstring, hk: hash_key, t: transcript) =
    prk1 <- kdf_extract(hk, t);
    k1 <- kdf_expand(prk1, ctr1);
    enc(m, k1).

(* Queries *)

param qEnc.

query secret b.

let QencLR(b0: bool, hk: hash_key, t: transcript) = 
    foreach i <= qEnc do
        Oenc (m1: bitstring, m2: bitstring) :=
        if Z(m1) = Z(m2) then (* m1 and m2 have the same length *)
        m0 <- if b0 then m1 else m2;
        return(full_enc(m0, hk, t)).

process 
    Ostart() :=
    b <-R bool;
    hk <-R hash_key;
    t <-R transcript;
    return;
    (run QencLR(b, hk, t) | run Okdf_extract(hk))