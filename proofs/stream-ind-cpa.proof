Initial state
Game 1 is
     Ostart() :=
     b <-R bool;
     hk_2 <-R hash_key;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       m0: bitstring <- (if b then m1 else m2);
       return((m: bitstring <- m0; prk1: prk <- kdf_extract(hk_2, t_2); k1: key <- kdf_expand(prk1, ctr1); m_1: bitstring <- m; k: key <- k1; r <-R enc_seed; enc_r(m_1, k, r)))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return(kdf_extract(hk_2, x1))
     ))


Applying expand
  - Expand if/find/let
yields

Game 2 is
     Ostart() :=
     b <-R bool;
     hk_2 <-R hash_key;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         m0: bitstring <- m1;
         m: bitstring <- m0;
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         m_1: bitstring <- m;
         k: key <- k1;
         r <-R enc_seed;
         return(enc_r(m_1, k, r))
       else
         m0: bitstring <- m2;
         m: bitstring <- m0;
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         m_1: bitstring <- m;
         k: key <- k1;
         r <-R enc_seed;
         return(enc_r(m_1, k, r))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return(kdf_extract(hk_2, x1))
     ))


Applying remove assignments of findcond
  - Remove assignments on m0 (definition removed, all usages removed)
  - Remove assignments on m (definition removed, all usages removed)
  - Remove assignments on m_1 (definition removed, all usages removed)
  - Remove assignments on k (definition removed, all usages removed)
  - Remove assignments on m0 (definition removed, all usages removed)
  - Remove assignments on m (definition removed, all usages removed)
  - Remove assignments on m_1 (definition removed, all usages removed)
  - Remove assignments on k (definition removed, all usages removed)
yields

Game 3 is
     Ostart() :=
     b <-R bool;
     hk_2 <-R hash_key;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         r <-R enc_seed;
         return(enc_r(m1, k1, r))
       else
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         r <-R enc_seed;
         return(enc_r(m2, k1, r))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return(kdf_extract(hk_2, x1))
     ))


Applying SA rename new without array accesses and remove assignments of findcond
  - Rename variable r into r_2, r_1
yields

Game 4 is
     Ostart() :=
     b <-R bool;
     hk_2 <-R hash_key;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         r_2 <-R enc_seed;
         return(enc_r(m1, k1, r_2))
       else
         prk1: prk <- kdf_extract(hk_2, t_2);
         k1: key <- kdf_expand(prk1, ctr1);
         r_1 <-R enc_seed;
         return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return(kdf_extract(hk_2, x1))
     ))


Applying equivalence rom(kdf_extract)
  - Equivalence rom(kdf_extract) with variables: hk_2 -> hk_3
yields

Game 5 is
     Ostart() :=
     b <-R bool;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         prk1: prk <- (x_O: transcript <- t_2; {23}find [unique] u_8 = ri_8 <= qEnc suchthat defined(x_O[ri_8], r_3[ri_8]) && {26}(x_O = x_O[ri_8]) then r_3[u_8] orfind u_7 = ri_7 <= qEnc suchthat defined(x_O_1[ri_7], r_4[ri_7]) && {36}(x_O = x_O_1[ri_7]) then r_4[u_7] orfind u_6 = ri_6 <= qKDFextract suchthat defined(x_O_2[ri_6], r_5[ri_6]) && (x_O = x_O_2[ri_6]) then r_5[u_6] else r_3 <-R prk; r_3);
         k1: key <- kdf_expand(prk1, ctr1);
         r_2 <-R enc_seed;
         return(enc_r(m1, k1, r_2))
       else
         prk1: prk <- (x_O_1: transcript <- t_2; {78}find [unique] u_5 = ri_5 <= qEnc suchthat defined(x_O[ri_5], r_3[ri_5]) && {81}(x_O_1 = x_O[ri_5]) then r_3[u_5] orfind u_4 = ri_4 <= qEnc suchthat defined(x_O_1[ri_4], r_4[ri_4]) && {91}(x_O_1 = x_O_1[ri_4]) then r_4[u_4] orfind u_3 = ri_3 <= qKDFextract suchthat defined(x_O_2[ri_3], r_5[ri_3]) && (x_O_1 = x_O_2[ri_3]) then r_5[u_3] else r_4 <-R prk; r_4);
         k1: key <- kdf_expand(prk1, ctr1);
         r_1 <-R enc_seed;
         return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return((x_O_2: transcript <- x1; find [unique] u_2 = ri_2 <= qEnc suchthat defined(x_O[ri_2], r_3[ri_2]) && (x_O_2 = x_O[ri_2]) then r_3[u_2] orfind u_1 = ri_1 <= qEnc suchthat defined(x_O_1[ri_1], r_4[ri_1]) && (x_O_2 = x_O_1[ri_1]) then r_4[u_1] orfind u = ri <= qKDFextract suchthat defined(x_O_2[ri], r_5[ri]) && (x_O_2 = x_O_2[ri]) then r_5[u] else r_5 <-R prk; r_5))
     ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Replaced (x_O = x_O_1[ri_7]) with false at 36
    - Remove branch 2 in find at 23
    - Replaced (x_O = x_O[ri_8]) with true at 26
    - Replaced (x_O_1 = x_O_1[ri_4]) with true at 91
    - Replaced (x_O_1 = x_O[ri_5]) with false at 81
    - Remove branch 1 in find at 78
yields

Game 6 is
     Ostart() :=
     b <-R bool;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         prk1: prk <- (x_O: transcript <- t_2; {23}find [unique] u_8 = ri_8 <= qEnc suchthat defined(x_O[ri_8], r_3[ri_8]) then r_3[u_8] orfind u_6 = ri_6 <= qKDFextract suchthat defined(x_O_2[ri_6], r_5[ri_6]) && (x_O = x_O_2[ri_6]) then r_5[u_6] else r_3 <-R prk; r_3);
         k1: key <- kdf_expand(prk1, ctr1);
         r_2 <-R enc_seed;
         return(enc_r(m1, k1, r_2))
       else
         prk1: prk <- (x_O_1: transcript <- t_2; {64}find [unique] u_4 = ri_4 <= qEnc suchthat defined(x_O_1[ri_4], r_4[ri_4]) then r_4[u_4] orfind u_3 = ri_3 <= qKDFextract suchthat defined(x_O_2[ri_3], r_5[ri_3]) && (x_O_1 = x_O_2[ri_3]) then r_5[u_3] else r_4 <-R prk; r_4);
         k1: key <- kdf_expand(prk1, ctr1);
         r_1 <-R enc_seed;
         return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       return((x_O_2: transcript <- x1; find [unique] u_2 = ri_2 <= qEnc suchthat defined(x_O[ri_2], r_3[ri_2]) && (x_O_2 = x_O[ri_2]) then r_3[u_2] orfind u_1 = ri_1 <= qEnc suchthat defined(x_O_1[ri_1], r_4[ri_1]) && (x_O_2 = x_O_1[ri_1]) then r_4[u_1] orfind u = ri <= qKDFextract suchthat defined(x_O_2[ri], r_5[ri]) && (x_O_2 = x_O_2[ri]) then r_5[u] else r_5 <-R prk; r_5))
     ))


Applying expand
  - Expand if/find/let
    - Replaced defined condition x_O_1[ri_4], r_4[ri_4] with r_4[ri_4] in find at 64
    - Replaced defined condition x_O[ri_8], r_3[ri_8] with r_3[ri_8] in find at 23
yields

Game 7 is
     Ostart() :=
     b <-R bool;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         x_O: transcript <- t_2;
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           prk1: prk <- r_3[u_8];
           k1: key <- kdf_expand(prk1, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         orfind u_6 = ri_6 <= qKDFextract suchthat defined(x_O_2[ri_6], r_5[ri_6]) && (x_O = x_O_2[ri_6]) then
           prk1: prk <- r_5[u_6];
           k1: key <- kdf_expand(prk1, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         else
           r_3 <-R prk;
           prk1: prk <- r_3;
           k1: key <- kdf_expand(prk1, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
       else
         x_O_1: transcript <- t_2;
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           prk1: prk <- r_4[u_4];
           k1: key <- kdf_expand(prk1, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         orfind u_3 = ri_3 <= qKDFextract suchthat defined(x_O_2[ri_3], r_5[ri_3]) && (x_O_1 = x_O_2[ri_3]) then
           prk1: prk <- r_5[u_3];
           k1: key <- kdf_expand(prk1, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         else
           r_4 <-R prk;
           prk1: prk <- r_4;
           k1: key <- kdf_expand(prk1, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       x_O_2: transcript <- x1;
       find [unique] u_2 = ri_2 <= qEnc suchthat defined(x_O[ri_2], r_3[ri_2]) && (x_O_2 = x_O[ri_2]) then
         return(r_3[u_2])
       orfind u_1 = ri_1 <= qEnc suchthat defined(x_O_1[ri_1], r_4[ri_1]) && (x_O_2 = x_O_1[ri_1]) then
         return(r_4[u_1])
       orfind u = ri <= qKDFextract suchthat defined(x_O_2[ri], r_5[ri]) && (x_O_2 = x_O_2[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying remove assignments of findcond
  - Remove assignments on x_O_2 (definition point kept, all usages removed)
  - Remove assignments on x_O_1 (definition point kept, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
  - Remove assignments on x_O (definition point kept, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
  - Remove assignments on prk1 (definition removed, all usages removed)
yields

Game 8 is
     Ostart() :=
     b <-R bool;
     t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         x_O: transcript <- cst_transcript;
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         orfind u_6 = ri_6 <= qKDFextract suchthat defined(x1[ri_6], x_O_2[ri_6], r_5[ri_6]) && (t_2 = x1[ri_6]) then
           k1: key <- kdf_expand(r_5[u_6], ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
       else
         x_O_1: transcript <- cst_transcript;
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- kdf_expand(r_4[u_4], ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         orfind u_3 = ri_3 <= qKDFextract suchthat defined(x1[ri_3], x_O_2[ri_3], r_5[ri_3]) && (t_2 = x1[ri_3]) then
           k1: key <- kdf_expand(r_5[u_3], ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         else
           r_4 <-R prk;
           k1: key <- kdf_expand(r_4, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       x_O_2: transcript <- cst_transcript;
       find [unique] u_2 = ri_2 <= qEnc suchthat defined(t_2, x_O[ri_2], r_3[ri_2]) && (x1 = t_2) then
         return(r_3[u_2])
       orfind u_1 = ri_1 <= qEnc suchthat defined(t_2, x_O_1[ri_1], r_4[ri_1]) && (x1 = t_2) then
         return(r_4[u_1])
       orfind u = ri <= qKDFextract suchthat defined(x1[ri], x_O_2[ri], r_5[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify [probability qKDFextract * Pcoll1rand(transcript)]
  - Global dependency analysis on t_2
yields

Game 9 is
     Ostart() :=
     b <-R bool;
  {3}t_2 <-R transcript;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         x_O: transcript <- cst_transcript;
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
       else
         x_O_1: transcript <- cst_transcript;
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- kdf_expand(r_4[u_4], ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         else
           r_4 <-R prk;
           k1: key <- kdf_expand(r_4, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       x_O_2: transcript <- cst_transcript;
{110}  find [unique] u = ri <= qKDFextract suchthat defined(x1[ri], x_O_2[ri], r_5[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify
  - Simplification pass
    - Replaced defined condition x1[ri], x_O_2[ri], r_5[ri] with r_5[ri], x1[ri] in find at 110
    - Remove random number generation at 3
yields

Game 10 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         x_O: transcript <- cst_transcript;
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
       else
         x_O_1: transcript <- cst_transcript;
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- kdf_expand(r_4[u_4], ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         else
           r_4 <-R prk;
           k1: key <- kdf_expand(r_4, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       x_O_2: transcript <- cst_transcript;
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying move all binders
  - Move assignment to x_O_2
  - Move assignment to x_O_1
  - Move assignment to x_O
yields

Game 11 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_2 <-R enc_seed;
           return(enc_r(m1, k1, r_2))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- kdf_expand(r_4[u_4], ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
         else
           r_4 <-R prk;
           k1: key <- kdf_expand(r_4, ctr1);
           r_1 <-R enc_seed;
           return(enc_r(m2, k1, r_1))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying SA rename new without array accesses and remove assignments of findcond
  - Rename variable r_1 into r_7, r_6
  - Rename variable r_2 into r_9, r_8
yields

Game 12 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- kdf_expand(r_4[u_4], ctr1);
           r_7 <-R enc_seed;
           return(enc_r(m2, k1, r_7))
         else
           r_4 <-R prk;
           k1: key <- kdf_expand(r_4, ctr1);
           r_6 <-R enc_seed;
           return(enc_r(m2, k1, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying equivalence prf(kdf_expand) [probability qEnc * Pkdf(time_1, 1)]
  - Equivalence prf(kdf_expand) with variables: r_4 -> k_2
yields

Game 13 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- (x_O_4: ctr <- ctr1; find [unique]  suchthat defined(x_O_3[u_4], r_10[u_4]) && {69}(x_O_4 = x_O_3[u_4]) then r_10[u_4] orfind u_10 = ri_11 <= qEnc suchthat defined(r_11[ri_11], x_O_4[ri_11], u_4[ri_11]) && (u_4[ri_11] = u_4) && (x_O_4 = x_O_4[ri_11]) then r_11[u_10] else r_11 <-R key; r_11);
           r_7 <-R enc_seed;
           return(enc_r(m2, k1, r_7))
         else
           r_4: prk <- cst_prk;
           k1: key <- (x_O_3: ctr <- ctr1; {115}find [unique] u_9 = ri_9 <= qEnc suchthat defined(u_4[ri_9], x_O_4[ri_9], r_11[ri_9]) && {119}((u_4[ri_9] = i) && (x_O_3 = x_O_4[ri_9])) then r_11[u_9] else r_10 <-R key; r_10);
           r_6 <-R enc_seed;
           return(enc_r(m2, k1, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Replaced (x_O_4 = x_O_3[u_4]) with true at 69
    - Replaced ((u_4[ri_9] = i) && (x_O_3 = x_O_4[ri_9])) with false at 119
    - Remove branch 1 in find at 115
    - Find at 115 removed (else branch kept if any)
yields

Game 14 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           k1: key <- (x_O_4: ctr <- ctr1; {64}find [unique]  suchthat defined(x_O_3[u_4], r_10[u_4]) then r_10[u_4] orfind u_10 = ri_11 <= qEnc suchthat defined(r_11[ri_11], x_O_4[ri_11], u_4[ri_11]) && (u_4[ri_11] = u_4) && (x_O_4 = x_O_4[ri_11]) then r_11[u_10] else r_11 <-R key; r_11);
           r_7 <-R enc_seed;
           return(enc_r(m2, k1, r_7))
         else
           r_4: prk <- cst_prk;
           k1: key <- (x_O_3: ctr <- ctr1; r_10 <-R key; r_10);
           r_6 <-R enc_seed;
           return(enc_r(m2, k1, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying expand
  - Expand if/find/let
    - Replaced defined condition r_11[ri_11], x_O_4[ri_11], u_4[ri_11] with r_11[ri_11] in find at 64
    - Replaced defined condition x_O_3[u_4], r_10[u_4] with r_10[u_4] in find at 64
yields

Game 15 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_4[ri_4]) then
           x_O_4: ctr <- ctr1;
           find [unique]  suchthat defined(r_10[u_4]) then
             k1: key <- r_10[u_4];
             r_7 <-R enc_seed;
             return(enc_r(m2, k1, r_7))
           orfind u_10 = ri_11 <= qEnc suchthat defined(r_11[ri_11]) then
             k1: key <- r_11[u_10];
             r_7 <-R enc_seed;
             return(enc_r(m2, k1, r_7))
           else
             r_11 <-R key;
             k1: key <- r_11;
             r_7 <-R enc_seed;
             return(enc_r(m2, k1, r_7))
         else
           r_4: prk <- cst_prk;
           x_O_3: ctr <- ctr1;
           r_10 <-R key;
           k1: key <- r_10;
           r_6 <-R enc_seed;
           return(enc_r(m2, k1, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying remove assignments of findcond
  - Remove assignments on r_4 (definition removed, all usages removed)
  - Remove assignments on x_O_3 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on x_O_4 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
yields

Game 16 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
 {58}    find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
 {61}      find [unique]  suchthat defined(r_10[u_4]) then
             r_7 <-R enc_seed;
             return(enc_r(m2, r_10[u_4], r_7))
           orfind u_10 = ri_11 <= qEnc suchthat defined(r_11[ri_11]) then
             r_7 <-R enc_seed;
             return(enc_r(m2, r_11[u_10], r_7))
           else
             r_11 <-R key;
             r_7 <-R enc_seed;
             return(enc_r(m2, r_11, r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify
  - Simplification pass
    - Simplified find at 61 in branch of find at 58
yields

Game 17 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
 {58}    find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4], r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         orfind u_4 = ri_4 <= qEnc, u_10 = ri_11 <= qEnc suchthat defined(r_10[ri_4], r_11[ri_11]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_11[u_10], r_7))
         else
 {89}      find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
             r_11 <-R key;
             r_7 <-R enc_seed;
             return(enc_r(m2, r_11, r_7))
           else
             r_10 <-R key;
             r_6 <-R enc_seed;
             return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify
  - Simplification pass
    - Remove branch 1 in find at 89
    - Find at 89 removed (else branch kept if any)
    - Remove branch 2 in find at 58
    - Replaced defined condition r_10[ri_4], r_10[ri_4] with r_10[ri_4] in find at 58
yields

Game 18 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- kdf_expand(r_3[u_8], ctr1);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3 <-R prk;
           k1: key <- kdf_expand(r_3, ctr1);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying equivalence prf(kdf_expand) [probability qEnc * Pkdf(time_2, 1)]
  - Equivalence prf(kdf_expand) with variables: r_3 -> k_2
yields

Game 19 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- (x_O_6: ctr <- ctr1; find [unique]  suchthat defined(x_O_5[u_8], r_12[u_8]) && {30}(x_O_6 = x_O_5[u_8]) then r_12[u_8] orfind u_13 = ri_15 <= qEnc suchthat defined(r_13[ri_15], x_O_6[ri_15], u_8[ri_15]) && (u_8[ri_15] = u_8) && (x_O_6 = x_O_6[ri_15]) then r_13[u_13] else r_13 <-R key; r_13);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3: prk <- cst_prk;
           k1: key <- (x_O_5: ctr <- ctr1; {76}find [unique] u_12 = ri_13 <= qEnc suchthat defined(u_8[ri_13], x_O_6[ri_13], r_13[ri_13]) && {80}((u_8[ri_13] = i) && (x_O_5 = x_O_6[ri_13])) then r_13[u_12] else r_12 <-R key; r_12);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify (non-expanded game)
  - Simplification pass
    - Replaced (x_O_6 = x_O_5[u_8]) with true at 30
    - Replaced ((u_8[ri_13] = i) && (x_O_5 = x_O_6[ri_13])) with false at 80
    - Remove branch 1 in find at 76
    - Find at 76 removed (else branch kept if any)
yields

Game 20 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           k1: key <- (x_O_6: ctr <- ctr1; {25}find [unique]  suchthat defined(x_O_5[u_8], r_12[u_8]) then r_12[u_8] orfind u_13 = ri_15 <= qEnc suchthat defined(r_13[ri_15], x_O_6[ri_15], u_8[ri_15]) && (u_8[ri_15] = u_8) && (x_O_6 = x_O_6[ri_15]) then r_13[u_13] else r_13 <-R key; r_13);
           r_9 <-R enc_seed;
           return(enc_r(m1, k1, r_9))
         else
           r_3: prk <- cst_prk;
           k1: key <- (x_O_5: ctr <- ctr1; r_12 <-R key; r_12);
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying expand
  - Expand if/find/let
    - Replaced defined condition r_13[ri_15], x_O_6[ri_15], u_8[ri_15] with r_13[ri_15] in find at 25
    - Replaced defined condition x_O_5[u_8], r_12[u_8] with r_12[u_8] in find at 25
yields

Game 21 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_3[ri_8]) then
           x_O_6: ctr <- ctr1;
           find [unique]  suchthat defined(r_12[u_8]) then
             k1: key <- r_12[u_8];
             r_9 <-R enc_seed;
             return(enc_r(m1, k1, r_9))
           orfind u_13 = ri_15 <= qEnc suchthat defined(r_13[ri_15]) then
             k1: key <- r_13[u_13];
             r_9 <-R enc_seed;
             return(enc_r(m1, k1, r_9))
           else
             r_13 <-R key;
             k1: key <- r_13;
             r_9 <-R enc_seed;
             return(enc_r(m1, k1, r_9))
         else
           r_3: prk <- cst_prk;
           x_O_5: ctr <- ctr1;
           r_12 <-R key;
           k1: key <- r_12;
           r_8 <-R enc_seed;
           return(enc_r(m1, k1, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying remove assignments of findcond
  - Remove assignments on r_3 (definition removed, all usages removed)
  - Remove assignments on x_O_5 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on x_O_6 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
  - Remove assignments on k1 (definition removed, all usages removed)
yields

Game 22 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
 {19}    find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
 {22}      find [unique]  suchthat defined(r_12[u_8]) then
             r_9 <-R enc_seed;
             return(enc_r(m1, r_12[u_8], r_9))
           orfind u_13 = ri_15 <= qEnc suchthat defined(r_13[ri_15]) then
             r_9 <-R enc_seed;
             return(enc_r(m1, r_13[u_13], r_9))
           else
             r_13 <-R key;
             r_9 <-R enc_seed;
             return(enc_r(m1, r_13, r_9))
         else
           r_12 <-R key;
           r_8 <-R enc_seed;
           return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify
  - Simplification pass
    - Simplified find at 22 in branch of find at 19
yields

Game 23 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
 {19}    find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8], r_12[ri_8]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_12[u_8], r_9))
         orfind u_8 = ri_8 <= qEnc, u_13 = ri_15 <= qEnc suchthat defined(r_12[ri_8], r_13[ri_15]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_13[u_13], r_9))
         else
 {50}      find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
             r_13 <-R key;
             r_9 <-R enc_seed;
             return(enc_r(m1, r_13, r_9))
           else
             r_12 <-R key;
             r_8 <-R enc_seed;
             return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying simplify
  - Simplification pass
    - Remove branch 1 in find at 50
    - Find at 50 removed (else branch kept if any)
    - Remove branch 2 in find at 19
    - Replaced defined condition r_12[ri_8], r_12[ri_8] with r_12[ri_8] in find at 19
yields

Game 24 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_12[u_8], r_9))
         else
           r_12 <-R key;
           r_8 <-R enc_seed;
           return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_10[ri_4]) then
           r_7 <-R enc_seed;
           return(enc_r(m2, r_10[u_4], r_7))
         else
           r_10 <-R key;
           r_6 <-R enc_seed;
           return(enc_r(m2, r_10, r_6))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying equivalence ind_cpa(enc) [probability qEnc * Penc(time_3, 1 + qEnc, maxlength(game 24: m2))]
  - Equivalence ind_cpa(enc) with variables: r_7 -> r, r_10 -> k, r_6 -> r
yields

Game 25 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_12[u_8], r_9))
         else
           r_12 <-R key;
           r_8 <-R enc_seed;
           return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           return((x_1: bitstring <- m2; enc_r'(Z(x_1), r_15[u_4], r_16)))
         else
           r_15 <-R key;
           r_10: key <- cst_key;
           r_14 <-R enc_seed;
           return((x: bitstring <- m2; enc_r'(Z(x), r_15, r_14)))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying expand
  - Expand if/find/let
yields

Game 26 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_12[u_8], r_9))
         else
           r_12 <-R key;
           r_8 <-R enc_seed;
           return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           x_1: bitstring <- m2;
           return(enc_r'(Z(x_1), r_15[u_4], r_16))
         else
           r_15 <-R key;
           r_10: key <- cst_key;
           r_14 <-R enc_seed;
           x: bitstring <- m2;
           return(enc_r'(Z(x), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying remove assignments of findcond
  - Remove assignments on r_10 (definition removed, all usages removed)
  - Remove assignments on x (definition removed, all usages removed)
  - Remove assignments on x_1 (definition removed, all usages removed)
yields

Game 27 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_12[ri_8]) then
           r_9 <-R enc_seed;
           return(enc_r(m1, r_12[u_8], r_9))
         else
           r_12 <-R key;
           r_8 <-R enc_seed;
           return(enc_r(m1, r_12, r_8))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           return(enc_r'(Z(m2), r_15[u_4], r_16))
         else
           r_15 <-R key;
           r_14 <-R enc_seed;
           return(enc_r'(Z(m2), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying equivalence ind_cpa(enc) [probability qEnc * Penc(time_4, 1 + qEnc, maxlength(game 27: m1))]
  - Equivalence ind_cpa(enc) with variables: r_9 -> r, r_12 -> k, r_8 -> r
yields

Game 28 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_18[ri_8]) then
           r_19 <-R enc_seed;
           return((x_3: bitstring <- m1; enc_r'(Z(x_3), r_18[u_8], r_19)))
         else
           r_18 <-R key;
           r_12: key <- cst_key;
           r_17 <-R enc_seed;
           return((x_2: bitstring <- m1; enc_r'(Z(x_2), r_18, r_17)))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           return(enc_r'(Z(m2), r_15[u_4], r_16))
         else
           r_15 <-R key;
           r_14 <-R enc_seed;
           return(enc_r'(Z(m2), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying expand
  - Expand if/find/let
yields

Game 29 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_18[ri_8]) then
           r_19 <-R enc_seed;
           x_3: bitstring <- m1;
           return(enc_r'(Z(x_3), r_18[u_8], r_19))
         else
           r_18 <-R key;
           r_12: key <- cst_key;
           r_17 <-R enc_seed;
           x_2: bitstring <- m1;
           return(enc_r'(Z(x_2), r_18, r_17))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           return(enc_r'(Z(m2), r_15[u_4], r_16))
         else
           r_15 <-R key;
           r_14 <-R enc_seed;
           return(enc_r'(Z(m2), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying remove assignments of findcond
  - Remove assignments on r_12 (definition removed, all usages removed)
  - Remove assignments on x_2 (definition removed, all usages removed)
  - Remove assignments on x_3 (definition removed, all usages removed)
yields

Game 30 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
 {17}  if b then
         find [unique] u_8 = ri_8 <= qEnc suchthat defined(r_18[ri_8]) then
           r_19 <-R enc_seed;
           return(enc_r'(Z(m1), r_18[u_8], r_19))
         else
           r_18 <-R key;
           r_17 <-R enc_seed;
           return(enc_r'(Z(m1), r_18, r_17))
       else
         find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
           r_16 <-R enc_seed;
           return(enc_r'(Z(m2), r_15[u_4], r_16))
         else
           r_15 <-R key;
           r_14 <-R enc_seed;
           return(enc_r'(Z(m2), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Applying merge branches
  - Merge branches of test at 17
yields

Game 31 is
     Ostart() :=
     b <-R bool;
     return();
     ((
       foreach i <= qEnc do
       Oenc(m1: bitstring, m2: bitstring) :=
       if Z(m1) = Z(m2) then
       find [unique] u_4 = ri_4 <= qEnc suchthat defined(r_15[ri_4]) then
         r_16 <-R enc_seed;
         return(enc_r'(Z(m2), r_15[u_4], r_16))
       else
         r_15 <-R key;
         r_14 <-R enc_seed;
         return(enc_r'(Z(m2), r_15, r_14))
     ) | (
       foreach iH <= qKDFextract do
       OH(x1: transcript) :=
       find [unique] u = ri <= qKDFextract suchthat defined(r_5[ri], x1[ri]) && (x1 = x1[ri]) then
         return(r_5[u])
       else
         r_5 <-R prk;
         return(r_5)
     ))


Proved bit secrecy of b in game 31
Adv[Game 1: bit secrecy of b] <= 2 * qEnc * Penc(time_4, 1 + qEnc, maxlength(game 27: m1)) + 2 * qEnc * Penc(time_3, 1 + qEnc, maxlength(game 24: m2)) + 2 * qEnc * Pkdf(time_2, 1) + 2 * qEnc * Pkdf(time_1, 1) + 2 * qKDFextract * Pcoll1rand(transcript) + Adv[Game 31: bit secrecy of b]
Adv[Game 31: bit secrecy of b] <= 0
RESULT Proved bit secrecy of b up to probability 2 * qEnc * Penc(time_4, 1 + qEnc, maxlength(game 27: m1)) + 2 * qEnc * Penc(time_3, 1 + qEnc, maxlength(game 24: m2)) + 2 * qEnc * Pkdf(time_2, 1) + 2 * qEnc * Pkdf(time_1, 1) + 2 * qKDFextract * Pcoll1rand(transcript)
RESULT time_1 = qEnc * time(= bitstring, length(Z, maxlength(game 12: m1)), length(Z, maxlength(game 12: m2))) + qEnc * time(Z, maxlength(game 12: m2)) + qEnc * time(Z, maxlength(game 12: m1)) + qEnc * time(enc_r, maxlength(game 12: m1)) + qEnc * time(enc_r, maxlength(game 12: m2)) + time + (2 * qEnc - 1) * time(kdf_expand)
RESULT time_2 = qEnc * time(= bitstring, length(Z, maxlength(game 18: m1)), length(Z, maxlength(game 18: m2))) + qEnc * time(Z, maxlength(game 18: m2)) + qEnc * time(Z, maxlength(game 18: m1)) + qEnc * time(enc_r, maxlength(game 18: m1)) + qEnc * time(enc_r, maxlength(game 18: m2)) + time + (qEnc - 1) * time(kdf_expand)
RESULT time_3 = qEnc * time(= bitstring, length(Z, maxlength(game 24: m1)), length(Z, maxlength(game 24: m2))) + qEnc * time(Z, maxlength(game 24: m2)) + qEnc * time(Z, maxlength(game 24: m1)) + qEnc * time(enc_r, maxlength(game 24: m1)) + time + qEnc * max(time(enc_r, maxlength(game 24: m2)), time(Z, max(maxlength(game 25: x_1), maxlength(game 25: x))) + time(enc_r', length(Z, max(maxlength(game 25: x_1), maxlength(game 25: x)))))
RESULT time_4 = qEnc * time(= bitstring, length(Z, maxlength(game 27: m1)), length(Z, maxlength(game 27: m2))) + qEnc * time(Z, maxlength(game 27: m1)) + qEnc * time(enc_r', length(Z, maxlength(game 27: m2))) + 2 * qEnc * time(Z, maxlength(game 27: m2)) + time + qEnc * max(time(enc_r, maxlength(game 27: m1)), time(Z, max(maxlength(game 28: x_3), maxlength(game 28: x_2))) + time(enc_r', length(Z, max(maxlength(game 28: x_3), maxlength(game 28: x_2)))))
All queries proved.
